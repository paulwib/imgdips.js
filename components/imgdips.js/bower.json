{
  "name": "imgdips.js",
  "version": "0.0.2",
  "main": "imgdips.js",
  "ignore": [
    "**/.*",
    "node_modules",
    "components"
  ],
  "devDependencies": {
    "jquery": "~1.8.3",
    "qunit": "~1.11.0"
  },
  "gitHead": "4cd6303faa0dfa54d258ea9088519c461903901d",
  "readme": "#imgdips.js\n\nReplace images on high DPI screens with high resolution alternatives based on\ndevice-independent-pixel (dips) ratios. The current device pixel ratio is\nnormalized to a ratio name which is used as a file suffix or `data-*` attribute.\n\nIt takes a slightly different approach to some other libraries:\n\n1. JavaScript image objects are used to check for alternate images, rather than\n   Ajax requests. This ensures everything works cross-domain (like when your\n   images are on a CDN).\n\n   There are also caching advantages over making an Ajax HEAD request. The\n   HEAD request gets a quicker response, but if the image exists it needs\n   another HTTP request to load the image and the same time to wait for it to\n   load, so this isn't really an advantage. By using image objects the\n   response (should) be cached, so only one HTTP request is needed.\n\n2. Multiple ratio names can be mapped to different minimum device pixel\n   ratios. Not only does this make testing on low DPI devices a bit easier it\n   also future-proofs against the time when we need to support @2x, @4x and\n   @8x images :)\n\n3. It doesn't mention any Apple marketing terms like \"retina screens\". Damn.\n\n##Usage\n\nInclude the script however you prefer, then when the DOM is ready:\n\n```javascript\nImgDips.init(options);\n```\n\nBy default it will attempt to replace the `src` for all `img` tags with the\nclass `dips` when the `window.devicePixelRatio` is greater than 1.5 by adding\nthe file suffix `@2x`. Your images should have width and height attributes.\n\nYou can also set the hi-res image URL with a `data-2x` attribute.\n\nNote you don't have to wait until the DOM has fully loaded as there is no\ndependence on other libraries and the initial images don't have to be loaded.\nRunning this script just before you're closing `BODY` tag should work (unless\nother scripts add more images).\n\nIf any other script wants to access the currently used ratio name, for example\na gallery that loads images dynamically, it can do:\n\n```javascript\nvar suffix = ImgDips.getRatioName();\n```\n\nOr it can check the body tag's `data-dips-ratio-name`, for example with jQuery:\n\n```javascript\nvar suffix = $('body').data('dips-ratio-name');\n```\n\n\n##Options:\n\n```javascript\n{\n  // Image CSS selector\n  selector: '.dips',\n\n  // Normalize names to pixel ratios, the highest matched ratio will win\n  devicePixelRatioNames: {\n    '@2x': 1.5,\n    '@4x': 3,\n    '@8x': 6\n  }\n}\n```\nIn this case the alternate `data` attributes available would be `data-2x`,\n`data-4x` and `data-8x`.\n\nChanging ratio names may change the alternate `data` attributes available. The\nattribute name is based on the ratio name with all non-alphanumerics removed. So\n`@2x`, `_2x` and `-2x` would all map to `data-2x`. But `@2times` would map to\n`data-2times`.\n\n",
  "readmeFilename": "README.md",
  "_id": "imgdips.js@0.0.2",
  "description": "Replace images on high DPI screens with high resolution alternatives based on device-independent-pixel (dips) ratios. The current device pixel ratio is normalized to a ratio name which is used as a file suffix or `data-*` attribute.",
  "repository": {
    "type": "git",
    "url": "git://github.com/paulwib/imgdips.js.git"
  }
}